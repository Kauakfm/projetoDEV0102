//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DEV0102.br.com.averba.webserver {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ATMWebSvrBinding", Namespace="urn:ATMWebSvr")]
    public partial class ATMWebSvr : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback averbaCTeOperationCompleted;
        
        private System.Threading.SendOrPostCallback averbaCTe20OperationCompleted;
        
        private System.Threading.SendOrPostCallback averbaNFeOperationCompleted;
        
        private System.Threading.SendOrPostCallback averbaNFe20OperationCompleted;
        
        private System.Threading.SendOrPostCallback averbaATMOperationCompleted;
        
        private System.Threading.SendOrPostCallback listaErrosOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBackMailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ATMWebSvr() {
            this.Url = global::DEV0102.Properties.Settings.Default.DEV0102_br_com_averba_webserver_ATMWebSvr;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event averbaCTeCompletedEventHandler averbaCTeCompleted;
        
        /// <remarks/>
        public event averbaCTe20CompletedEventHandler averbaCTe20Completed;
        
        /// <remarks/>
        public event averbaNFeCompletedEventHandler averbaNFeCompleted;
        
        /// <remarks/>
        public event averbaNFe20CompletedEventHandler averbaNFe20Completed;
        
        /// <remarks/>
        public event averbaATMCompletedEventHandler averbaATMCompleted;
        
        /// <remarks/>
        public event listaErrosCompletedEventHandler listaErrosCompleted;
        
        /// <remarks/>
        public event AddBackMailCompletedEventHandler AddBackMailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ATMWebSvr#averbaCTe", RequestNamespace="urn:ATMWebSvr", ResponseNamespace="urn:ATMWebSvr")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string averbaCTe(string usuario, string senha, string codatm, string xmlCTe) {
            object[] results = this.Invoke("averbaCTe", new object[] {
                        usuario,
                        senha,
                        codatm,
                        xmlCTe});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void averbaCTeAsync(string usuario, string senha, string codatm, string xmlCTe) {
            this.averbaCTeAsync(usuario, senha, codatm, xmlCTe, null);
        }
        
        /// <remarks/>
        public void averbaCTeAsync(string usuario, string senha, string codatm, string xmlCTe, object userState) {
            if ((this.averbaCTeOperationCompleted == null)) {
                this.averbaCTeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaverbaCTeOperationCompleted);
            }
            this.InvokeAsync("averbaCTe", new object[] {
                        usuario,
                        senha,
                        codatm,
                        xmlCTe}, this.averbaCTeOperationCompleted, userState);
        }
        
        private void OnaverbaCTeOperationCompleted(object arg) {
            if ((this.averbaCTeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.averbaCTeCompleted(this, new averbaCTeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ATMWebSvr#averbaCTe20", RequestNamespace="urn:ATMWebSvr", ResponseNamespace="urn:ATMWebSvr")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string averbaCTe20(string usuario, string senha, string codatm, string xmlCTe) {
            object[] results = this.Invoke("averbaCTe20", new object[] {
                        usuario,
                        senha,
                        codatm,
                        xmlCTe});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void averbaCTe20Async(string usuario, string senha, string codatm, string xmlCTe) {
            this.averbaCTe20Async(usuario, senha, codatm, xmlCTe, null);
        }
        
        /// <remarks/>
        public void averbaCTe20Async(string usuario, string senha, string codatm, string xmlCTe, object userState) {
            if ((this.averbaCTe20OperationCompleted == null)) {
                this.averbaCTe20OperationCompleted = new System.Threading.SendOrPostCallback(this.OnaverbaCTe20OperationCompleted);
            }
            this.InvokeAsync("averbaCTe20", new object[] {
                        usuario,
                        senha,
                        codatm,
                        xmlCTe}, this.averbaCTe20OperationCompleted, userState);
        }
        
        private void OnaverbaCTe20OperationCompleted(object arg) {
            if ((this.averbaCTe20Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.averbaCTe20Completed(this, new averbaCTe20CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ATMWebSvr#averbaNFe", RequestNamespace="urn:ATMWebSvr", ResponseNamespace="urn:ATMWebSvr")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string averbaNFe(string usuario, string senha, string codatm, string xmlNFe) {
            object[] results = this.Invoke("averbaNFe", new object[] {
                        usuario,
                        senha,
                        codatm,
                        xmlNFe});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void averbaNFeAsync(string usuario, string senha, string codatm, string xmlNFe) {
            this.averbaNFeAsync(usuario, senha, codatm, xmlNFe, null);
        }
        
        /// <remarks/>
        public void averbaNFeAsync(string usuario, string senha, string codatm, string xmlNFe, object userState) {
            if ((this.averbaNFeOperationCompleted == null)) {
                this.averbaNFeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaverbaNFeOperationCompleted);
            }
            this.InvokeAsync("averbaNFe", new object[] {
                        usuario,
                        senha,
                        codatm,
                        xmlNFe}, this.averbaNFeOperationCompleted, userState);
        }
        
        private void OnaverbaNFeOperationCompleted(object arg) {
            if ((this.averbaNFeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.averbaNFeCompleted(this, new averbaNFeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ATMWebSvr#averbaNFe20", RequestNamespace="urn:ATMWebSvr", ResponseNamespace="urn:ATMWebSvr")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string averbaNFe20(string usuario, string senha, string codatm, string xmlNFe) {
            object[] results = this.Invoke("averbaNFe20", new object[] {
                        usuario,
                        senha,
                        codatm,
                        xmlNFe});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void averbaNFe20Async(string usuario, string senha, string codatm, string xmlNFe) {
            this.averbaNFe20Async(usuario, senha, codatm, xmlNFe, null);
        }
        
        /// <remarks/>
        public void averbaNFe20Async(string usuario, string senha, string codatm, string xmlNFe, object userState) {
            if ((this.averbaNFe20OperationCompleted == null)) {
                this.averbaNFe20OperationCompleted = new System.Threading.SendOrPostCallback(this.OnaverbaNFe20OperationCompleted);
            }
            this.InvokeAsync("averbaNFe20", new object[] {
                        usuario,
                        senha,
                        codatm,
                        xmlNFe}, this.averbaNFe20OperationCompleted, userState);
        }
        
        private void OnaverbaNFe20OperationCompleted(object arg) {
            if ((this.averbaNFe20Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.averbaNFe20Completed(this, new averbaNFe20CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ATMWebSvr#averbaATM", RequestNamespace="urn:ATMWebSvr", ResponseNamespace="urn:ATMWebSvr")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string averbaATM(
                    string usuario, 
                    string senha, 
                    string codatm, 
                    string Serie, 
                    string Numero, 
                    string UFOrigem, 
                    string UFDestino, 
                    string Urbano, 
                    string TipoMercadoria, 
                    string ValorMercadoria, 
                    string Placa, 
                    string CodigoLiberacao, 
                    string CPFMotorista, 
                    string CNPJEmissor, 
                    string OCD, 
                    string IC, 
                    string RI, 
                    string TranspProprio, 
                    string DataEmissao, 
                    string TipoDocto, 
                    string TipoTransporte, 
                    string TipoMovimento, 
                    string TaxaRCFDC, 
                    string PercursoComplementar, 
                    string PercursoComplementarTransporte, 
                    string PercursoComplementarUFOrigem, 
                    string PercursoComplementarUFDestino, 
                    string RGMotorista, 
                    string Ramo, 
                    string Filial, 
                    string Rastreado, 
                    string Escolta, 
                    string Observacoes, 
                    string ValorContainner, 
                    string ValorAcessorios, 
                    string MeiosProprios, 
                    string DataEmbarque, 
                    string ValorFrete, 
                    string ValorDespesas, 
                    string ValorImpostos, 
                    string ValorLucrosEsperados, 
                    string ValorAvarias, 
                    string CodigoDaMercadoria, 
                    string HoraEmbarque, 
                    string CEPOrigem, 
                    string CEPDestino, 
                    string CNPJDDR, 
                    string MercadoriaNova, 
                    string TipoDeViagem) {
            object[] results = this.Invoke("averbaATM", new object[] {
                        usuario,
                        senha,
                        codatm,
                        Serie,
                        Numero,
                        UFOrigem,
                        UFDestino,
                        Urbano,
                        TipoMercadoria,
                        ValorMercadoria,
                        Placa,
                        CodigoLiberacao,
                        CPFMotorista,
                        CNPJEmissor,
                        OCD,
                        IC,
                        RI,
                        TranspProprio,
                        DataEmissao,
                        TipoDocto,
                        TipoTransporte,
                        TipoMovimento,
                        TaxaRCFDC,
                        PercursoComplementar,
                        PercursoComplementarTransporte,
                        PercursoComplementarUFOrigem,
                        PercursoComplementarUFDestino,
                        RGMotorista,
                        Ramo,
                        Filial,
                        Rastreado,
                        Escolta,
                        Observacoes,
                        ValorContainner,
                        ValorAcessorios,
                        MeiosProprios,
                        DataEmbarque,
                        ValorFrete,
                        ValorDespesas,
                        ValorImpostos,
                        ValorLucrosEsperados,
                        ValorAvarias,
                        CodigoDaMercadoria,
                        HoraEmbarque,
                        CEPOrigem,
                        CEPDestino,
                        CNPJDDR,
                        MercadoriaNova,
                        TipoDeViagem});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void averbaATMAsync(
                    string usuario, 
                    string senha, 
                    string codatm, 
                    string Serie, 
                    string Numero, 
                    string UFOrigem, 
                    string UFDestino, 
                    string Urbano, 
                    string TipoMercadoria, 
                    string ValorMercadoria, 
                    string Placa, 
                    string CodigoLiberacao, 
                    string CPFMotorista, 
                    string CNPJEmissor, 
                    string OCD, 
                    string IC, 
                    string RI, 
                    string TranspProprio, 
                    string DataEmissao, 
                    string TipoDocto, 
                    string TipoTransporte, 
                    string TipoMovimento, 
                    string TaxaRCFDC, 
                    string PercursoComplementar, 
                    string PercursoComplementarTransporte, 
                    string PercursoComplementarUFOrigem, 
                    string PercursoComplementarUFDestino, 
                    string RGMotorista, 
                    string Ramo, 
                    string Filial, 
                    string Rastreado, 
                    string Escolta, 
                    string Observacoes, 
                    string ValorContainner, 
                    string ValorAcessorios, 
                    string MeiosProprios, 
                    string DataEmbarque, 
                    string ValorFrete, 
                    string ValorDespesas, 
                    string ValorImpostos, 
                    string ValorLucrosEsperados, 
                    string ValorAvarias, 
                    string CodigoDaMercadoria, 
                    string HoraEmbarque, 
                    string CEPOrigem, 
                    string CEPDestino, 
                    string CNPJDDR, 
                    string MercadoriaNova, 
                    string TipoDeViagem) {
            this.averbaATMAsync(usuario, senha, codatm, Serie, Numero, UFOrigem, UFDestino, Urbano, TipoMercadoria, ValorMercadoria, Placa, CodigoLiberacao, CPFMotorista, CNPJEmissor, OCD, IC, RI, TranspProprio, DataEmissao, TipoDocto, TipoTransporte, TipoMovimento, TaxaRCFDC, PercursoComplementar, PercursoComplementarTransporte, PercursoComplementarUFOrigem, PercursoComplementarUFDestino, RGMotorista, Ramo, Filial, Rastreado, Escolta, Observacoes, ValorContainner, ValorAcessorios, MeiosProprios, DataEmbarque, ValorFrete, ValorDespesas, ValorImpostos, ValorLucrosEsperados, ValorAvarias, CodigoDaMercadoria, HoraEmbarque, CEPOrigem, CEPDestino, CNPJDDR, MercadoriaNova, TipoDeViagem, null);
        }
        
        /// <remarks/>
        public void averbaATMAsync(
                    string usuario, 
                    string senha, 
                    string codatm, 
                    string Serie, 
                    string Numero, 
                    string UFOrigem, 
                    string UFDestino, 
                    string Urbano, 
                    string TipoMercadoria, 
                    string ValorMercadoria, 
                    string Placa, 
                    string CodigoLiberacao, 
                    string CPFMotorista, 
                    string CNPJEmissor, 
                    string OCD, 
                    string IC, 
                    string RI, 
                    string TranspProprio, 
                    string DataEmissao, 
                    string TipoDocto, 
                    string TipoTransporte, 
                    string TipoMovimento, 
                    string TaxaRCFDC, 
                    string PercursoComplementar, 
                    string PercursoComplementarTransporte, 
                    string PercursoComplementarUFOrigem, 
                    string PercursoComplementarUFDestino, 
                    string RGMotorista, 
                    string Ramo, 
                    string Filial, 
                    string Rastreado, 
                    string Escolta, 
                    string Observacoes, 
                    string ValorContainner, 
                    string ValorAcessorios, 
                    string MeiosProprios, 
                    string DataEmbarque, 
                    string ValorFrete, 
                    string ValorDespesas, 
                    string ValorImpostos, 
                    string ValorLucrosEsperados, 
                    string ValorAvarias, 
                    string CodigoDaMercadoria, 
                    string HoraEmbarque, 
                    string CEPOrigem, 
                    string CEPDestino, 
                    string CNPJDDR, 
                    string MercadoriaNova, 
                    string TipoDeViagem, 
                    object userState) {
            if ((this.averbaATMOperationCompleted == null)) {
                this.averbaATMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaverbaATMOperationCompleted);
            }
            this.InvokeAsync("averbaATM", new object[] {
                        usuario,
                        senha,
                        codatm,
                        Serie,
                        Numero,
                        UFOrigem,
                        UFDestino,
                        Urbano,
                        TipoMercadoria,
                        ValorMercadoria,
                        Placa,
                        CodigoLiberacao,
                        CPFMotorista,
                        CNPJEmissor,
                        OCD,
                        IC,
                        RI,
                        TranspProprio,
                        DataEmissao,
                        TipoDocto,
                        TipoTransporte,
                        TipoMovimento,
                        TaxaRCFDC,
                        PercursoComplementar,
                        PercursoComplementarTransporte,
                        PercursoComplementarUFOrigem,
                        PercursoComplementarUFDestino,
                        RGMotorista,
                        Ramo,
                        Filial,
                        Rastreado,
                        Escolta,
                        Observacoes,
                        ValorContainner,
                        ValorAcessorios,
                        MeiosProprios,
                        DataEmbarque,
                        ValorFrete,
                        ValorDespesas,
                        ValorImpostos,
                        ValorLucrosEsperados,
                        ValorAvarias,
                        CodigoDaMercadoria,
                        HoraEmbarque,
                        CEPOrigem,
                        CEPDestino,
                        CNPJDDR,
                        MercadoriaNova,
                        TipoDeViagem}, this.averbaATMOperationCompleted, userState);
        }
        
        private void OnaverbaATMOperationCompleted(object arg) {
            if ((this.averbaATMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.averbaATMCompleted(this, new averbaATMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ATMWebSvr#listaErros", RequestNamespace="urn:ATMWebSvr", ResponseNamespace="urn:ATMWebSvr")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string listaErros(string usuario, string senha, string codatm) {
            object[] results = this.Invoke("listaErros", new object[] {
                        usuario,
                        senha,
                        codatm});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void listaErrosAsync(string usuario, string senha, string codatm) {
            this.listaErrosAsync(usuario, senha, codatm, null);
        }
        
        /// <remarks/>
        public void listaErrosAsync(string usuario, string senha, string codatm, object userState) {
            if ((this.listaErrosOperationCompleted == null)) {
                this.listaErrosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistaErrosOperationCompleted);
            }
            this.InvokeAsync("listaErros", new object[] {
                        usuario,
                        senha,
                        codatm}, this.listaErrosOperationCompleted, userState);
        }
        
        private void OnlistaErrosOperationCompleted(object arg) {
            if ((this.listaErrosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listaErrosCompleted(this, new listaErrosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:ATMWebSvr#AddBackMail", RequestNamespace="urn:ATMWebSvr", ResponseNamespace="urn:ATMWebSvr")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string AddBackMail(string usuario, string senha, string codatm, string aplicacao, string assunto, string remetentes, string destinatarios, string corpo, string chave, string chaveresp) {
            object[] results = this.Invoke("AddBackMail", new object[] {
                        usuario,
                        senha,
                        codatm,
                        aplicacao,
                        assunto,
                        remetentes,
                        destinatarios,
                        corpo,
                        chave,
                        chaveresp});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddBackMailAsync(string usuario, string senha, string codatm, string aplicacao, string assunto, string remetentes, string destinatarios, string corpo, string chave, string chaveresp) {
            this.AddBackMailAsync(usuario, senha, codatm, aplicacao, assunto, remetentes, destinatarios, corpo, chave, chaveresp, null);
        }
        
        /// <remarks/>
        public void AddBackMailAsync(string usuario, string senha, string codatm, string aplicacao, string assunto, string remetentes, string destinatarios, string corpo, string chave, string chaveresp, object userState) {
            if ((this.AddBackMailOperationCompleted == null)) {
                this.AddBackMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBackMailOperationCompleted);
            }
            this.InvokeAsync("AddBackMail", new object[] {
                        usuario,
                        senha,
                        codatm,
                        aplicacao,
                        assunto,
                        remetentes,
                        destinatarios,
                        corpo,
                        chave,
                        chaveresp}, this.AddBackMailOperationCompleted, userState);
        }
        
        private void OnAddBackMailOperationCompleted(object arg) {
            if ((this.AddBackMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBackMailCompleted(this, new AddBackMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void averbaCTeCompletedEventHandler(object sender, averbaCTeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class averbaCTeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal averbaCTeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void averbaCTe20CompletedEventHandler(object sender, averbaCTe20CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class averbaCTe20CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal averbaCTe20CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void averbaNFeCompletedEventHandler(object sender, averbaNFeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class averbaNFeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal averbaNFeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void averbaNFe20CompletedEventHandler(object sender, averbaNFe20CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class averbaNFe20CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal averbaNFe20CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void averbaATMCompletedEventHandler(object sender, averbaATMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class averbaATMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal averbaATMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void listaErrosCompletedEventHandler(object sender, listaErrosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listaErrosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listaErrosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void AddBackMailCompletedEventHandler(object sender, AddBackMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBackMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddBackMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591